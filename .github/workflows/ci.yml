name: Cross-platform CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'

jobs:
  # Build on Linux, macOS, and Windows
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu 22.04 with GCC and Clang
          - os: ubuntu-22.04
            cc: gcc
            cxx: g++
            build_type: Debug
          - os: ubuntu-22.04
            cc: gcc
            cxx: g++
            build_type: RelWithDebInfo
          - os: ubuntu-22.04
            cc: clang
            cxx: clang++
            build_type: Debug
          - os: ubuntu-22.04
            cc: clang
            cxx: clang++
            build_type: RelWithDebInfo
          
          # macOS 12 with AppleClang
          - os: macos-12
            cc: clang
            cxx: clang++
            build_type: Debug
          - os: macos-12
            cc: clang
            cxx: clang++
            build_type: RelWithDebInfo
          
          # Windows 2022 with MSYS2/MinGW
          - os: windows-2022
            cc: gcc
            cxx: g++
            build_type: Debug
            shell: msys2 {0}
          - os: windows-2022
            cc: gcc
            cxx: g++
            build_type: RelWithDebInfo
            shell: msys2 {0}

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell || 'bash' }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    # Setup MSYS2 for Windows builds
    - name: Setup MSYS2
      if: matrix.os == 'windows-2022'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-ninja
          mingw-w64-x86_64-pcre
          mingw-w64-x86_64-sqlite3
          mingw-w64-x86_64-openssl
          mingw-w64-x86_64-icu
          mingw-w64-x86_64-jemalloc
          mingw-w64-x86_64-libevent
          mingw-w64-x86_64-pkg-config
          bison
          make
    
    # Install dependencies for Linux
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt update
        sudo apt install -y build-essential autoconf automake bison expect \
          libmysqlclient-dev libpcre3-dev libpq-dev libsqlite3-dev libssl-dev \
          libtool libz-dev telnet libgtest-dev libjemalloc-dev libicu-dev \
          libevent-dev pkg-config cmake ninja-build
    
    # Install dependencies for macOS
    - name: Install macOS dependencies  
      if: matrix.os == 'macos-12'
      run: |
        brew install automake bison expect pcre sqlite3 openssl libtool \
          telnet jemalloc icu4c libevent pkg-config cmake ninja
        echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
        echo "/usr/local/opt/icu4c/bin" >> $GITHUB_PATH

    - name: Configure
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir build && cd build
        if [[ "${{ matrix.os }}" == "macos-12" ]]; then
          export PKG_CONFIG_PATH="/usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/openssl@3/lib/pkgconfig:$PKG_CONFIG_PATH"
          export LDFLAGS="-L/usr/local/opt/icu4c/lib -L/usr/local/opt/openssl@3/lib $LDFLAGS"
          export CPPFLAGS="-I/usr/local/opt/icu4c/include -I/usr/local/opt/openssl@3/include $CPPFLAGS"
        fi
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DPACKAGE_DB_SQLITE=2 -GNinja ..
    
    - name: Build
      run: |
        cd build
        ninja -j2
    
    - name: Install
      run: |
        cd build
        ninja install
    
    - name: Run unit tests
      env:
        CTEST_OUTPUT_ON_FAILURE: 1
      run: |
        cd build
        ctest -j2 --output-on-failure
    
    - name: Run integration tests
      run: |
        cd testsuite
        ../build/bin/driver etc/config.test -ftest

  # FreeBSD build using VM
  freebsd:
    runs-on: macos-12
    name: FreeBSD 13.0
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Build and test on FreeBSD
      uses: vmactions/freebsd-vm@v0
      with:
        version: '13.0'
        usesh: true
        prepare: |
          pkg install -y cmake ninja pkgconf autoconf automake bison \
            libtool pcre sqlite3 openssl icu jemalloc libevent \
            gmake git bash
        run: |
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPACKAGE_DB_SQLITE=2 -GNinja ..
          ninja -j2
          ninja install
          ctest -j2 --output-on-failure
          cd ../testsuite
          ../build/bin/driver etc/config.test -ftest
